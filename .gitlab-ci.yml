stages:
  - get
  - retrieve
  - build
  - install
  - recompose

before_script:
  - git config --global http.sslVerify false

get_packer:
  stage: get
  tags: 
    - windows
  artifacts:
    paths:
    - packer.exe
  script:
    - Write-Host "Fetching packer"
    - $packerFile = "packer_" + $packerVersion + "_windows_amd64.zip"
    - Invoke-WebRequest -Uri ($packerURL + "/" + $packerVersion + "/" + $packerFile) -OutFile $packerFile
    - Expand-Archive $packerFile -DestinationPath .

retrieve_vault_password:
  stage: retrieve
  tags:
    - windows
  artifacts:
    paths:
    - windows-10/setup/Autounattend.xml
  script:
    - Write-Host "Retrieving Administrator password from Vault"
    - $result = Invoke-RestMethod -Headers @{"X-Vault-Token" = ${env:VAULT_TOKEN}} -Method Get -Body $json -Uri ${env:VAULT_ADDR}/v1/credentials/users/misc/administrator
    - $pass = $result.data.Password
    - Write-Host "Updating Autounattend.xml file with Administrator password"
    - (Get-Content $xmlFile -Raw) -replace '{{password}}',$pass | Set-Content $xmlFile

build_windows-10:
  stage: build
  tags:
    - windows
  script:
    - Write-Host "Deploying Windows 10"
    - Set-Location windows-10
    - ../packer.exe build -force windows-10-pilot.json

install_powercli:
  stage: install
  tags:
    - windows
  script:
    - Write-Host "Installing NuGet"
    - Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
    - Write-Host "Set the repo installation policy"
    - Set-PSRepository PSGallery -InstallationPolicy Trusted
    - Write-Host "Installing PowerCLI"
    - Install-Module -Name VMware.PowerCLI -Scope CurrentUser -Confirm:$false
    - sleep 60
    - Set-PowerCLIConfiguration -Scope User -ParticipateInCEIP $false -InvalidCertificateAction Ignore -Confirm:$false
    - Write-Host "Importing the helper module"
    - Import-Module VMware.VimAutomation.HorizonView
    - if (Test-Path $env:Temp\PowerCLI-Example-Scripts){Remove-Item $env:Temp\PowerCLI-Example-Scripts -Recurse -Force -Confirm:$false}
    - git clone $exampleScriptURL $env:Temp\PowerCLI-Example-Scripts
    - $modulePath = [Environment]::GetEnvironmentVariable('PSModulePath').split(";")[0]
    - if (Test-Path $modulePath\PowerCLI-Example-Scripts){Remove-Item $modulePath\PowerCLI-Example-Scripts -Recurse -Force -Confirm:$false}
    - Copy-Item -Recurse $env:Temp\PowerCLI-Example-Scripts $modulePath

recompose_pool:
  stage: recompose
  tags:
    - windows
  script:
    - Write-Host "Connecting to Horizon"
    - Connect-HVServer -Server $cs -User $csUser -Password $csPass -Domain $csDomain
    - Write-Host "Refreshing Horizon Pool"
    - Start-HVPool -Pool $poolName -Recompose -LogoffSetting FORCE_LOGOFF -ParentVM "$packer_vmName" -SnapshotVM "Created by Packer" -StopOnFirstError $true
    - Write-Host "Disconnecting to Horizon"
    - Disconnect-HVServer -Server $cs -Confirm:$false
